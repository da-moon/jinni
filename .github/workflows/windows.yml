name: Windows CI
on:
  push:   {branches: [main]}
  pull_request: {branches: [main]}

jobs:
  build:
    runs-on: windows-latest
    env:
      VENV_DIR: .\.venv           # single source of truth
      VENV_BIN: .\.venv\Scripts   # helper so paths stay short

    steps:
    - uses: actions/checkout@v4

    - name: Set-up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    # ────────────────────────────────────────────
    #  Create & populate the venv with uv + dev-deps
    # ────────────────────────────────────────────
    - name: Install deps with uv
      shell: pwsh
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv venv $env:VENV_DIR          # creates the venv
        & $env:VENV_BIN\Activate.ps1   # enters the venv
        uv pip install -e .[dev]       # installs proj + pytest, pathspec, etc.

    # ────────────────────────────────────────────
    #  Run unit tests on host Windows
    # ────────────────────────────────────────────
    - name: Run pytest (host)
      shell: pwsh
      run: |
        & $env:VENV_BIN\Activate.ps1
        pytest -v

    # ────────────────────────────────────────────
    #  Provision WSL 2 (Ubuntu 22.04) once & keep
    # ────────────────────────────────────────────
    - name: Enable WSL (Ubuntu 22.04)
      uses: Vampire/setup-wsl@v5   # installs kernel if missing & updates it
      with:
        distribution: Ubuntu-22.04

    # ────────────────────────────────────────────
    #  Create a tiny project inside WSL we can read
    # ────────────────────────────────────────────
    - name: Create sample project in WSL
      shell: pwsh
      run: |
        wsl bash -c 'mkdir -p /home/runner/testproj && echo hi > /home/runner/testproj/hello.txt'

    - name: Warm-up WSL UNC share
      shell: pwsh
      run: |
        $distro = (wsl -l -q | Select-Object -First 1).Trim()
        if ($distro) {
          $unc = "\\\\wsl$\\$distro\\home\\runner\\testproj"
          Write-Host "Warming up $unc"
          # Try accessing the path, ignore errors if it fails (it might not be ready yet)
          cmd /c "dir $unc > nul 2>&1" || echo "UNC not yet available; continuing anyway"
        } else {
          Write-Host "No WSL distro found – skipping warm-up"
        }

    # ────────────────────────────────────────────
    #  Smoke-tests jinni path translation from Windows
    # ────────────────────────────────────────────
    - name: Smoke test vscode-remote URI
      shell: pwsh
      run: |
        $distro = (wsl -l -q | Select-Object -First 1).Trim()
        if (-not $distro) { throw "Could not determine WSL distro name." }
        $uri = "vscode-remote://wsl+$distro/home/runner/testproj"
        Write-Host "Testing URI: $uri"
        & $env:VENV_BIN\Activate.ps1
        & $env:VENV_BIN\jinni.exe --list-only $uri | Select-String 'hello.txt'

    - name: Smoke test POSIX path
      shell: pwsh
      run: |
        $distro = (wsl -l -q | Select-Object -First 1).Trim()
        if (-not $distro) { throw "Could not determine WSL distro name." }
        Write-Host "Assuming WSL distro for POSIX path test: $distro"
        & $env:VENV_BIN\Activate.ps1
        $env:JINNI_ASSUME_WSL_DISTRO=$distro
        & $env:VENV_BIN\jinni.exe --list-only '/home/runner/testproj' | Select-String 'hello.txt'
        $env:JINNI_ASSUME_WSL_DISTRO='' # Clear env var